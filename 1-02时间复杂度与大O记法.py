# 时间复杂度与"大O记法"
# 我们假定计算机执行算法每一个基本操作的时间是固定的一个时间单位,
# 那么有多少个基本操作就会代表会花费多少时间单位.
# 算法对于不同的机器环境而言,确切的单位时间是不同的,
# 但是对于算法进行多少个基本操作(即花费多少时间单位)在规模数量级上却是相同的
# 由此可以忽略机器环境的影响而客观的反应算法时间效率

# 对于算法的时间效率, 我们可以用"大O记法"来表示

# "大O记法": 对于单调的整数函数f,如果存在一个整数函数g和实常数c>0,
#            使得对于充分大的n总有f(n)<=c*g(n),就说函数g是f的一个渐近函数(忽略常数)
#            记为f(n)=O(g(n)),也就是说,在趋向无穷的极限意义下
#            函数f的增长速度受到函数g的约束,以及函数f与函数g的特征相似

# 时间复杂度: 假设存在函数g,使得算法A处理规模为n的问题实例所用时间为T(n)=O(g(n))
#             则称O(g(n))为算法A的渐近时间复杂度,简称时间复杂度,记为T(n)

# 每台机器执行的总时间不同
# 但是执行的基本运算数量大体相同
# 基本运算数量越多执行总时间越长
# 时间复杂度就是基本运算数量: T = 2000 * 2000 * 2000 * 2
# T = N * N * N * 2
# T(n) = n^3*2 时间复杂度


# 如何理解"大O记法"
# 对于算法进行特别具体的细致分析虽然很好,但在实践中的实际价值有限,对于算法的时间性质
# 和空间性质,最重要的是其数量级和趋势,这些是分析算法效率的主要部分,而计量算法基本操作
# 数量的回魔函数中那些常量因子可以忽略不计,例如,可以认为3n**2和100n**2属于同以量级
# 如果两个算法处理同样规模实例的待机分别为这两个函数,就认为它们的效率"差不多"
# 都为n**2级

# T(n) = n^3

# 
